'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ProjectData
    Inherits DataSet
    
    Private tableProject As ProjectDataTable
    
    Private tableJournal As JournalDataTable
    
    Private tableEntry As EntryDataTable
    
    Private tableTransaction As TransactionDataTable
    
    Private tableLedger As LedgerDataTable
    
    Private tableLedgerAccount As LedgerAccountDataTable
    
    Private tableBudget As BudgetDataTable
    
    Private tableBudgetAccount As BudgetAccountDataTable
    
    Private tableLayout As LayoutDataTable
    
    Private relationEntry_Transaction As DataRelation
    
    Private relationJournal_Entry As DataRelation
    
    Private relationLedger_LedgerAccount As DataRelation
    
    Private relationBudget_BudgetAccount As DataRelation
    
    Private relationProject_Journal As DataRelation
    
    Private relationProject_Ledger As DataRelation
    
    Private relationProject_Budget As DataRelation
    
    Private relationProject_Layout As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Project")) Is Nothing) Then
                Me.Tables.Add(New ProjectDataTable(ds.Tables("Project")))
            End If
            If (Not (ds.Tables("Journal")) Is Nothing) Then
                Me.Tables.Add(New JournalDataTable(ds.Tables("Journal")))
            End If
            If (Not (ds.Tables("Entry")) Is Nothing) Then
                Me.Tables.Add(New EntryDataTable(ds.Tables("Entry")))
            End If
            If (Not (ds.Tables("Transaction")) Is Nothing) Then
                Me.Tables.Add(New TransactionDataTable(ds.Tables("Transaction")))
            End If
            If (Not (ds.Tables("Ledger")) Is Nothing) Then
                Me.Tables.Add(New LedgerDataTable(ds.Tables("Ledger")))
            End If
            If (Not (ds.Tables("LedgerAccount")) Is Nothing) Then
                Me.Tables.Add(New LedgerAccountDataTable(ds.Tables("LedgerAccount")))
            End If
            If (Not (ds.Tables("Budget")) Is Nothing) Then
                Me.Tables.Add(New BudgetDataTable(ds.Tables("Budget")))
            End If
            If (Not (ds.Tables("BudgetAccount")) Is Nothing) Then
                Me.Tables.Add(New BudgetAccountDataTable(ds.Tables("BudgetAccount")))
            End If
            If (Not (ds.Tables("Layout")) Is Nothing) Then
                Me.Tables.Add(New LayoutDataTable(ds.Tables("Layout")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Project As ProjectDataTable
        Get
            Return Me.tableProject
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Journal As JournalDataTable
        Get
            Return Me.tableJournal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Entry As EntryDataTable
        Get
            Return Me.tableEntry
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Transaction As TransactionDataTable
        Get
            Return Me.tableTransaction
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ledger As LedgerDataTable
        Get
            Return Me.tableLedger
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LedgerAccount As LedgerAccountDataTable
        Get
            Return Me.tableLedgerAccount
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Budget As BudgetDataTable
        Get
            Return Me.tableBudget
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BudgetAccount As BudgetAccountDataTable
        Get
            Return Me.tableBudgetAccount
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Layout As LayoutDataTable
        Get
            Return Me.tableLayout
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ProjectData = CType(MyBase.Clone,ProjectData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Project")) Is Nothing) Then
            Me.Tables.Add(New ProjectDataTable(ds.Tables("Project")))
        End If
        If (Not (ds.Tables("Journal")) Is Nothing) Then
            Me.Tables.Add(New JournalDataTable(ds.Tables("Journal")))
        End If
        If (Not (ds.Tables("Entry")) Is Nothing) Then
            Me.Tables.Add(New EntryDataTable(ds.Tables("Entry")))
        End If
        If (Not (ds.Tables("Transaction")) Is Nothing) Then
            Me.Tables.Add(New TransactionDataTable(ds.Tables("Transaction")))
        End If
        If (Not (ds.Tables("Ledger")) Is Nothing) Then
            Me.Tables.Add(New LedgerDataTable(ds.Tables("Ledger")))
        End If
        If (Not (ds.Tables("LedgerAccount")) Is Nothing) Then
            Me.Tables.Add(New LedgerAccountDataTable(ds.Tables("LedgerAccount")))
        End If
        If (Not (ds.Tables("Budget")) Is Nothing) Then
            Me.Tables.Add(New BudgetDataTable(ds.Tables("Budget")))
        End If
        If (Not (ds.Tables("BudgetAccount")) Is Nothing) Then
            Me.Tables.Add(New BudgetAccountDataTable(ds.Tables("BudgetAccount")))
        End If
        If (Not (ds.Tables("Layout")) Is Nothing) Then
            Me.Tables.Add(New LayoutDataTable(ds.Tables("Layout")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableProject = CType(Me.Tables("Project"),ProjectDataTable)
        If (Not (Me.tableProject) Is Nothing) Then
            Me.tableProject.InitVars
        End If
        Me.tableJournal = CType(Me.Tables("Journal"),JournalDataTable)
        If (Not (Me.tableJournal) Is Nothing) Then
            Me.tableJournal.InitVars
        End If
        Me.tableEntry = CType(Me.Tables("Entry"),EntryDataTable)
        If (Not (Me.tableEntry) Is Nothing) Then
            Me.tableEntry.InitVars
        End If
        Me.tableTransaction = CType(Me.Tables("Transaction"),TransactionDataTable)
        If (Not (Me.tableTransaction) Is Nothing) Then
            Me.tableTransaction.InitVars
        End If
        Me.tableLedger = CType(Me.Tables("Ledger"),LedgerDataTable)
        If (Not (Me.tableLedger) Is Nothing) Then
            Me.tableLedger.InitVars
        End If
        Me.tableLedgerAccount = CType(Me.Tables("LedgerAccount"),LedgerAccountDataTable)
        If (Not (Me.tableLedgerAccount) Is Nothing) Then
            Me.tableLedgerAccount.InitVars
        End If
        Me.tableBudget = CType(Me.Tables("Budget"),BudgetDataTable)
        If (Not (Me.tableBudget) Is Nothing) Then
            Me.tableBudget.InitVars
        End If
        Me.tableBudgetAccount = CType(Me.Tables("BudgetAccount"),BudgetAccountDataTable)
        If (Not (Me.tableBudgetAccount) Is Nothing) Then
            Me.tableBudgetAccount.InitVars
        End If
        Me.tableLayout = CType(Me.Tables("Layout"),LayoutDataTable)
        If (Not (Me.tableLayout) Is Nothing) Then
            Me.tableLayout.InitVars
        End If
        Me.relationEntry_Transaction = Me.Relations("Entry_Transaction")
        Me.relationJournal_Entry = Me.Relations("Journal_Entry")
        Me.relationLedger_LedgerAccount = Me.Relations("Ledger_LedgerAccount")
        Me.relationBudget_BudgetAccount = Me.Relations("Budget_BudgetAccount")
        Me.relationProject_Journal = Me.Relations("Project_Journal")
        Me.relationProject_Ledger = Me.Relations("Project_Ledger")
        Me.relationProject_Budget = Me.Relations("Project_Budget")
        Me.relationProject_Layout = Me.Relations("Project_Layout")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ProjectData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ProjectData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableProject = New ProjectDataTable
        Me.Tables.Add(Me.tableProject)
        Me.tableJournal = New JournalDataTable
        Me.Tables.Add(Me.tableJournal)
        Me.tableEntry = New EntryDataTable
        Me.Tables.Add(Me.tableEntry)
        Me.tableTransaction = New TransactionDataTable
        Me.Tables.Add(Me.tableTransaction)
        Me.tableLedger = New LedgerDataTable
        Me.Tables.Add(Me.tableLedger)
        Me.tableLedgerAccount = New LedgerAccountDataTable
        Me.Tables.Add(Me.tableLedgerAccount)
        Me.tableBudget = New BudgetDataTable
        Me.Tables.Add(Me.tableBudget)
        Me.tableBudgetAccount = New BudgetAccountDataTable
        Me.Tables.Add(Me.tableBudgetAccount)
        Me.tableLayout = New LayoutDataTable
        Me.Tables.Add(Me.tableLayout)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Project_Journal", New DataColumn() {Me.tableProject.Project_IdColumn}, New DataColumn() {Me.tableJournal.Project_IdColumn})
        Me.tableJournal.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Journal_Entry", New DataColumn() {Me.tableJournal.Journal_IdColumn}, New DataColumn() {Me.tableEntry.Journal_IdColumn})
        Me.tableEntry.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Entry_Transaction", New DataColumn() {Me.tableEntry.Entry_IdColumn}, New DataColumn() {Me.tableTransaction.Entry_IdColumn})
        Me.tableTransaction.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Project_Ledger", New DataColumn() {Me.tableProject.Project_IdColumn}, New DataColumn() {Me.tableLedger.Project_IdColumn})
        Me.tableLedger.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Ledger_LedgerAccount", New DataColumn() {Me.tableLedger.Ledger_IdColumn}, New DataColumn() {Me.tableLedgerAccount.Ledger_IdColumn})
        Me.tableLedgerAccount.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Project_Budget", New DataColumn() {Me.tableProject.Project_IdColumn}, New DataColumn() {Me.tableBudget.Project_IdColumn})
        Me.tableBudget.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Budget_BudgetAccount", New DataColumn() {Me.tableBudget.Budget_IdColumn}, New DataColumn() {Me.tableBudgetAccount.Budget_IdColumn})
        Me.tableBudgetAccount.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Project_Layout", New DataColumn() {Me.tableProject.Project_IdColumn}, New DataColumn() {Me.tableLayout.Project_IdColumn})
        Me.tableLayout.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me.relationEntry_Transaction = New DataRelation("Entry_Transaction", New DataColumn() {Me.tableEntry.Entry_IdColumn}, New DataColumn() {Me.tableTransaction.Entry_IdColumn}, false)
        Me.relationEntry_Transaction.Nested = true
        Me.Relations.Add(Me.relationEntry_Transaction)
        Me.relationJournal_Entry = New DataRelation("Journal_Entry", New DataColumn() {Me.tableJournal.Journal_IdColumn}, New DataColumn() {Me.tableEntry.Journal_IdColumn}, false)
        Me.relationJournal_Entry.Nested = true
        Me.Relations.Add(Me.relationJournal_Entry)
        Me.relationLedger_LedgerAccount = New DataRelation("Ledger_LedgerAccount", New DataColumn() {Me.tableLedger.Ledger_IdColumn}, New DataColumn() {Me.tableLedgerAccount.Ledger_IdColumn}, false)
        Me.relationLedger_LedgerAccount.Nested = true
        Me.Relations.Add(Me.relationLedger_LedgerAccount)
        Me.relationBudget_BudgetAccount = New DataRelation("Budget_BudgetAccount", New DataColumn() {Me.tableBudget.Budget_IdColumn}, New DataColumn() {Me.tableBudgetAccount.Budget_IdColumn}, false)
        Me.relationBudget_BudgetAccount.Nested = true
        Me.Relations.Add(Me.relationBudget_BudgetAccount)
        Me.relationProject_Journal = New DataRelation("Project_Journal", New DataColumn() {Me.tableProject.Project_IdColumn}, New DataColumn() {Me.tableJournal.Project_IdColumn}, false)
        Me.relationProject_Journal.Nested = true
        Me.Relations.Add(Me.relationProject_Journal)
        Me.relationProject_Ledger = New DataRelation("Project_Ledger", New DataColumn() {Me.tableProject.Project_IdColumn}, New DataColumn() {Me.tableLedger.Project_IdColumn}, false)
        Me.relationProject_Ledger.Nested = true
        Me.Relations.Add(Me.relationProject_Ledger)
        Me.relationProject_Budget = New DataRelation("Project_Budget", New DataColumn() {Me.tableProject.Project_IdColumn}, New DataColumn() {Me.tableBudget.Project_IdColumn}, false)
        Me.relationProject_Budget.Nested = true
        Me.Relations.Add(Me.relationProject_Budget)
        Me.relationProject_Layout = New DataRelation("Project_Layout", New DataColumn() {Me.tableProject.Project_IdColumn}, New DataColumn() {Me.tableLayout.Project_IdColumn}, false)
        Me.relationProject_Layout.Nested = true
        Me.Relations.Add(Me.relationProject_Layout)
    End Sub
    
    Private Function ShouldSerializeProject() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeJournal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEntry() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTransaction() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLedger() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLedgerAccount() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBudget() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBudgetAccount() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLayout() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ProjectRowChangeEventHandler(ByVal sender As Object, ByVal e As ProjectRowChangeEvent)
    
    Public Delegate Sub JournalRowChangeEventHandler(ByVal sender As Object, ByVal e As JournalRowChangeEvent)
    
    Public Delegate Sub EntryRowChangeEventHandler(ByVal sender As Object, ByVal e As EntryRowChangeEvent)
    
    Public Delegate Sub TransactionRowChangeEventHandler(ByVal sender As Object, ByVal e As TransactionRowChangeEvent)
    
    Public Delegate Sub LedgerRowChangeEventHandler(ByVal sender As Object, ByVal e As LedgerRowChangeEvent)
    
    Public Delegate Sub LedgerAccountRowChangeEventHandler(ByVal sender As Object, ByVal e As LedgerAccountRowChangeEvent)
    
    Public Delegate Sub BudgetRowChangeEventHandler(ByVal sender As Object, ByVal e As BudgetRowChangeEvent)
    
    Public Delegate Sub BudgetAccountRowChangeEventHandler(ByVal sender As Object, ByVal e As BudgetAccountRowChangeEvent)
    
    Public Delegate Sub LayoutRowChangeEventHandler(ByVal sender As Object, ByVal e As LayoutRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTitle As DataColumn
        
        Private columnProject_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Project")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TitleColumn As DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Friend ReadOnly Property Project_IdColumn As DataColumn
            Get
                Return Me.columnProject_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProjectRow
            Get
                Return CType(Me.Rows(index),ProjectRow)
            End Get
        End Property
        
        Public Event ProjectRowChanged As ProjectRowChangeEventHandler
        
        Public Event ProjectRowChanging As ProjectRowChangeEventHandler
        
        Public Event ProjectRowDeleted As ProjectRowChangeEventHandler
        
        Public Event ProjectRowDeleting As ProjectRowChangeEventHandler
        
        Public Overloads Sub AddProjectRow(ByVal row As ProjectRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProjectRow(ByVal Title As String) As ProjectRow
            Dim rowProjectRow As ProjectRow = CType(Me.NewRow,ProjectRow)
            rowProjectRow.ItemArray = New Object() {Title, Nothing}
            Me.Rows.Add(rowProjectRow)
            Return rowProjectRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProjectDataTable = CType(MyBase.Clone,ProjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProjectDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTitle = Me.Columns("Title")
            Me.columnProject_Id = Me.Columns("Project_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnTitle = New DataColumn("Title", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitle)
            Me.columnProject_Id = New DataColumn("Project_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnProject_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnProject_Id}, true))
            Me.columnTitle.AllowDBNull = false
            Me.columnProject_Id.AutoIncrement = true
            Me.columnProject_Id.AllowDBNull = false
            Me.columnProject_Id.Unique = true
        End Sub
        
        Public Function NewProjectRow() As ProjectRow
            Return CType(Me.NewRow,ProjectRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProjectRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProjectRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProjectRowChangedEvent) Is Nothing) Then
                RaiseEvent ProjectRowChanged(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProjectRowChangingEvent) Is Nothing) Then
                RaiseEvent ProjectRowChanging(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProjectRowDeleted(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProjectRowDeleting(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProjectRow(ByVal row As ProjectRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectRow
        Inherits DataRow
        
        Private tableProject As ProjectDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProject = CType(Me.Table,ProjectDataTable)
        End Sub
        
        Public Property Title As String
            Get
                Return CType(Me(Me.tableProject.TitleColumn),String)
            End Get
            Set
                Me(Me.tableProject.TitleColumn) = value
            End Set
        End Property
        
        Public Function GetJournalRows() As JournalRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Project_Journal")),JournalRow())
        End Function
        
        Public Function GetLedgerRows() As LedgerRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Project_Ledger")),LedgerRow())
        End Function
        
        Public Function GetBudgetRows() As BudgetRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Project_Budget")),BudgetRow())
        End Function
        
        Public Function GetLayoutRows() As LayoutRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Project_Layout")),LayoutRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProjectRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProjectRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProjectRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JournalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnJournal_Id As DataColumn
        
        Private columnProject_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Journal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Journal_IdColumn As DataColumn
            Get
                Return Me.columnJournal_Id
            End Get
        End Property
        
        Friend ReadOnly Property Project_IdColumn As DataColumn
            Get
                Return Me.columnProject_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As JournalRow
            Get
                Return CType(Me.Rows(index),JournalRow)
            End Get
        End Property
        
        Public Event JournalRowChanged As JournalRowChangeEventHandler
        
        Public Event JournalRowChanging As JournalRowChangeEventHandler
        
        Public Event JournalRowDeleted As JournalRowChangeEventHandler
        
        Public Event JournalRowDeleting As JournalRowChangeEventHandler
        
        Public Overloads Sub AddJournalRow(ByVal row As JournalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddJournalRow(ByVal parentProjectRowByProject_Journal As ProjectRow) As JournalRow
            Dim rowJournalRow As JournalRow = CType(Me.NewRow,JournalRow)
            rowJournalRow.ItemArray = New Object() {Nothing, parentProjectRowByProject_Journal(1)}
            Me.Rows.Add(rowJournalRow)
            Return rowJournalRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As JournalDataTable = CType(MyBase.Clone,JournalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New JournalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnJournal_Id = Me.Columns("Journal_Id")
            Me.columnProject_Id = Me.Columns("Project_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnJournal_Id = New DataColumn("Journal_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnJournal_Id)
            Me.columnProject_Id = New DataColumn("Project_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnProject_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnJournal_Id}, true))
            Me.columnJournal_Id.AutoIncrement = true
            Me.columnJournal_Id.AllowDBNull = false
            Me.columnJournal_Id.Unique = true
        End Sub
        
        Public Function NewJournalRow() As JournalRow
            Return CType(Me.NewRow,JournalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New JournalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(JournalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.JournalRowChangedEvent) Is Nothing) Then
                RaiseEvent JournalRowChanged(Me, New JournalRowChangeEvent(CType(e.Row,JournalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.JournalRowChangingEvent) Is Nothing) Then
                RaiseEvent JournalRowChanging(Me, New JournalRowChangeEvent(CType(e.Row,JournalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.JournalRowDeletedEvent) Is Nothing) Then
                RaiseEvent JournalRowDeleted(Me, New JournalRowChangeEvent(CType(e.Row,JournalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.JournalRowDeletingEvent) Is Nothing) Then
                RaiseEvent JournalRowDeleting(Me, New JournalRowChangeEvent(CType(e.Row,JournalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveJournalRow(ByVal row As JournalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JournalRow
        Inherits DataRow
        
        Private tableJournal As JournalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableJournal = CType(Me.Table,JournalDataTable)
        End Sub
        
        Public Property ProjectRow As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Project_Journal")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Project_Journal"))
            End Set
        End Property
        
        Public Function GetEntryRows() As EntryRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Journal_Entry")),EntryRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JournalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As JournalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As JournalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As JournalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EntryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnComment As DataColumn
        
        Private columnType As DataColumn
        
        Private column_Date As DataColumn
        
        Private columnID As DataColumn
        
        Private columnEntry_Id As DataColumn
        
        Private columnJournal_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Entry")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CommentColumn As DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property _DateColumn As DataColumn
            Get
                Return Me.column_Date
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property Entry_IdColumn As DataColumn
            Get
                Return Me.columnEntry_Id
            End Get
        End Property
        
        Friend ReadOnly Property Journal_IdColumn As DataColumn
            Get
                Return Me.columnJournal_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EntryRow
            Get
                Return CType(Me.Rows(index),EntryRow)
            End Get
        End Property
        
        Public Event EntryRowChanged As EntryRowChangeEventHandler
        
        Public Event EntryRowChanging As EntryRowChangeEventHandler
        
        Public Event EntryRowDeleted As EntryRowChangeEventHandler
        
        Public Event EntryRowDeleting As EntryRowChangeEventHandler
        
        Public Overloads Sub AddEntryRow(ByVal row As EntryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEntryRow(ByVal Comment As String, ByVal Type As String, ByVal _Date As Date, ByVal ID As Integer, ByVal parentJournalRowByJournal_Entry As JournalRow) As EntryRow
            Dim rowEntryRow As EntryRow = CType(Me.NewRow,EntryRow)
            rowEntryRow.ItemArray = New Object() {Comment, Type, _Date, ID, Nothing, parentJournalRowByJournal_Entry(0)}
            Me.Rows.Add(rowEntryRow)
            Return rowEntryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EntryDataTable = CType(MyBase.Clone,EntryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EntryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnComment = Me.Columns("Comment")
            Me.columnType = Me.Columns("Type")
            Me.column_Date = Me.Columns("Date")
            Me.columnID = Me.Columns("ID")
            Me.columnEntry_Id = Me.Columns("Entry_Id")
            Me.columnJournal_Id = Me.Columns("Journal_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnComment = New DataColumn("Comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComment)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.column_Date = New DataColumn("Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Date)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnEntry_Id = New DataColumn("Entry_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnEntry_Id)
            Me.columnJournal_Id = New DataColumn("Journal_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnJournal_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnEntry_Id}, true))
            Me.columnComment.AllowDBNull = false
            Me.column_Date.AllowDBNull = false
            Me.columnID.AllowDBNull = false
            Me.columnEntry_Id.AutoIncrement = true
            Me.columnEntry_Id.AllowDBNull = false
            Me.columnEntry_Id.Unique = true
        End Sub
        
        Public Function NewEntryRow() As EntryRow
            Return CType(Me.NewRow,EntryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EntryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EntryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EntryRowChangedEvent) Is Nothing) Then
                RaiseEvent EntryRowChanged(Me, New EntryRowChangeEvent(CType(e.Row,EntryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EntryRowChangingEvent) Is Nothing) Then
                RaiseEvent EntryRowChanging(Me, New EntryRowChangeEvent(CType(e.Row,EntryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EntryRowDeletedEvent) Is Nothing) Then
                RaiseEvent EntryRowDeleted(Me, New EntryRowChangeEvent(CType(e.Row,EntryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EntryRowDeletingEvent) Is Nothing) Then
                RaiseEvent EntryRowDeleting(Me, New EntryRowChangeEvent(CType(e.Row,EntryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEntryRow(ByVal row As EntryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EntryRow
        Inherits DataRow
        
        Private tableEntry As EntryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEntry = CType(Me.Table,EntryDataTable)
        End Sub
        
        Public Property Comment As String
            Get
                Return CType(Me(Me.tableEntry.CommentColumn),String)
            End Get
            Set
                Me(Me.tableEntry.CommentColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tableEntry.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEntry.TypeColumn) = value
            End Set
        End Property
        
        Public Property _Date As Date
            Get
                Return CType(Me(Me.tableEntry._DateColumn),Date)
            End Get
            Set
                Me(Me.tableEntry._DateColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableEntry.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableEntry.IDColumn) = value
            End Set
        End Property
        
        Public Property JournalRow As JournalRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Journal_Entry")),JournalRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Journal_Entry"))
            End Set
        End Property
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableEntry.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableEntry.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetTransactionRows() As TransactionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Entry_Transaction")),TransactionRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EntryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EntryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EntryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EntryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TransactionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPath As DataColumn
        
        Private columnValue As DataColumn
        
        Private columnQuantity As DataColumn
        
        Private columnNormalBalance As DataColumn
        
        Private columnEntry_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Transaction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PathColumn As DataColumn
            Get
                Return Me.columnPath
            End Get
        End Property
        
        Friend ReadOnly Property ValueColumn As DataColumn
            Get
                Return Me.columnValue
            End Get
        End Property
        
        Friend ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Friend ReadOnly Property NormalBalanceColumn As DataColumn
            Get
                Return Me.columnNormalBalance
            End Get
        End Property
        
        Friend ReadOnly Property Entry_IdColumn As DataColumn
            Get
                Return Me.columnEntry_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TransactionRow
            Get
                Return CType(Me.Rows(index),TransactionRow)
            End Get
        End Property
        
        Public Event TransactionRowChanged As TransactionRowChangeEventHandler
        
        Public Event TransactionRowChanging As TransactionRowChangeEventHandler
        
        Public Event TransactionRowDeleted As TransactionRowChangeEventHandler
        
        Public Event TransactionRowDeleting As TransactionRowChangeEventHandler
        
        Public Overloads Sub AddTransactionRow(ByVal row As TransactionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTransactionRow(ByVal Path As String, ByVal Value As Single, ByVal Quantity As Long, ByVal NormalBalance As String, ByVal parentEntryRowByEntry_Transaction As EntryRow) As TransactionRow
            Dim rowTransactionRow As TransactionRow = CType(Me.NewRow,TransactionRow)
            rowTransactionRow.ItemArray = New Object() {Path, Value, Quantity, NormalBalance, parentEntryRowByEntry_Transaction(4)}
            Me.Rows.Add(rowTransactionRow)
            Return rowTransactionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TransactionDataTable = CType(MyBase.Clone,TransactionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TransactionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPath = Me.Columns("Path")
            Me.columnValue = Me.Columns("Value")
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnNormalBalance = Me.Columns("NormalBalance")
            Me.columnEntry_Id = Me.Columns("Entry_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPath = New DataColumn("Path", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPath)
            Me.columnValue = New DataColumn("Value", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValue)
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnNormalBalance = New DataColumn("NormalBalance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNormalBalance)
            Me.columnEntry_Id = New DataColumn("Entry_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnEntry_Id)
            Me.columnPath.AllowDBNull = false
            Me.columnNormalBalance.AllowDBNull = false
        End Sub
        
        Public Function NewTransactionRow() As TransactionRow
            Return CType(Me.NewRow,TransactionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TransactionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TransactionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TransactionRowChangedEvent) Is Nothing) Then
                RaiseEvent TransactionRowChanged(Me, New TransactionRowChangeEvent(CType(e.Row,TransactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TransactionRowChangingEvent) Is Nothing) Then
                RaiseEvent TransactionRowChanging(Me, New TransactionRowChangeEvent(CType(e.Row,TransactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TransactionRowDeletedEvent) Is Nothing) Then
                RaiseEvent TransactionRowDeleted(Me, New TransactionRowChangeEvent(CType(e.Row,TransactionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TransactionRowDeletingEvent) Is Nothing) Then
                RaiseEvent TransactionRowDeleting(Me, New TransactionRowChangeEvent(CType(e.Row,TransactionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTransactionRow(ByVal row As TransactionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TransactionRow
        Inherits DataRow
        
        Private tableTransaction As TransactionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTransaction = CType(Me.Table,TransactionDataTable)
        End Sub
        
        Public Property Path As String
            Get
                Return CType(Me(Me.tableTransaction.PathColumn),String)
            End Get
            Set
                Me(Me.tableTransaction.PathColumn) = value
            End Set
        End Property
        
        Public Property Value As Single
            Get
                Try 
                    Return CType(Me(Me.tableTransaction.ValueColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransaction.ValueColumn) = value
            End Set
        End Property
        
        Public Property Quantity As Long
            Get
                Try 
                    Return CType(Me(Me.tableTransaction.QuantityColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransaction.QuantityColumn) = value
            End Set
        End Property
        
        Public Property NormalBalance As String
            Get
                Return CType(Me(Me.tableTransaction.NormalBalanceColumn),String)
            End Get
            Set
                Me(Me.tableTransaction.NormalBalanceColumn) = value
            End Set
        End Property
        
        Public Property EntryRow As EntryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Entry_Transaction")),EntryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Entry_Transaction"))
            End Set
        End Property
        
        Public Function IsValueNull() As Boolean
            Return Me.IsNull(Me.tableTransaction.ValueColumn)
        End Function
        
        Public Sub SetValueNull()
            Me(Me.tableTransaction.ValueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableTransaction.QuantityColumn)
        End Function
        
        Public Sub SetQuantityNull()
            Me(Me.tableTransaction.QuantityColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TransactionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TransactionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TransactionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TransactionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFirstDate As DataColumn
        
        Private columnLastDate As DataColumn
        
        Private columnLedger_Id As DataColumn
        
        Private columnProject_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Ledger")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FirstDateColumn As DataColumn
            Get
                Return Me.columnFirstDate
            End Get
        End Property
        
        Friend ReadOnly Property LastDateColumn As DataColumn
            Get
                Return Me.columnLastDate
            End Get
        End Property
        
        Friend ReadOnly Property Ledger_IdColumn As DataColumn
            Get
                Return Me.columnLedger_Id
            End Get
        End Property
        
        Friend ReadOnly Property Project_IdColumn As DataColumn
            Get
                Return Me.columnProject_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LedgerRow
            Get
                Return CType(Me.Rows(index),LedgerRow)
            End Get
        End Property
        
        Public Event LedgerRowChanged As LedgerRowChangeEventHandler
        
        Public Event LedgerRowChanging As LedgerRowChangeEventHandler
        
        Public Event LedgerRowDeleted As LedgerRowChangeEventHandler
        
        Public Event LedgerRowDeleting As LedgerRowChangeEventHandler
        
        Public Overloads Sub AddLedgerRow(ByVal row As LedgerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLedgerRow(ByVal FirstDate As Date, ByVal LastDate As Date, ByVal parentProjectRowByProject_Ledger As ProjectRow) As LedgerRow
            Dim rowLedgerRow As LedgerRow = CType(Me.NewRow,LedgerRow)
            rowLedgerRow.ItemArray = New Object() {FirstDate, LastDate, Nothing, parentProjectRowByProject_Ledger(1)}
            Me.Rows.Add(rowLedgerRow)
            Return rowLedgerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LedgerDataTable = CType(MyBase.Clone,LedgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LedgerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFirstDate = Me.Columns("FirstDate")
            Me.columnLastDate = Me.Columns("LastDate")
            Me.columnLedger_Id = Me.Columns("Ledger_Id")
            Me.columnProject_Id = Me.Columns("Project_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnFirstDate = New DataColumn("FirstDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstDate)
            Me.columnLastDate = New DataColumn("LastDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastDate)
            Me.columnLedger_Id = New DataColumn("Ledger_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnLedger_Id)
            Me.columnProject_Id = New DataColumn("Project_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnProject_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnLedger_Id}, true))
            Me.columnLedger_Id.AutoIncrement = true
            Me.columnLedger_Id.AllowDBNull = false
            Me.columnLedger_Id.Unique = true
        End Sub
        
        Public Function NewLedgerRow() As LedgerRow
            Return CType(Me.NewRow,LedgerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LedgerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LedgerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LedgerRowChangedEvent) Is Nothing) Then
                RaiseEvent LedgerRowChanged(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LedgerRowChangingEvent) Is Nothing) Then
                RaiseEvent LedgerRowChanging(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LedgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent LedgerRowDeleted(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LedgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent LedgerRowDeleting(Me, New LedgerRowChangeEvent(CType(e.Row,LedgerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLedgerRow(ByVal row As LedgerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerRow
        Inherits DataRow
        
        Private tableLedger As LedgerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLedger = CType(Me.Table,LedgerDataTable)
        End Sub
        
        Public Property FirstDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableLedger.FirstDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.FirstDateColumn) = value
            End Set
        End Property
        
        Public Property LastDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableLedger.LastDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLedger.LastDateColumn) = value
            End Set
        End Property
        
        Public Property ProjectRow As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Project_Ledger")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Project_Ledger"))
            End Set
        End Property
        
        Public Function IsFirstDateNull() As Boolean
            Return Me.IsNull(Me.tableLedger.FirstDateColumn)
        End Function
        
        Public Sub SetFirstDateNull()
            Me(Me.tableLedger.FirstDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastDateNull() As Boolean
            Return Me.IsNull(Me.tableLedger.LastDateColumn)
        End Function
        
        Public Sub SetLastDateNull()
            Me(Me.tableLedger.LastDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetLedgerAccountRows() As LedgerAccountRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Ledger_LedgerAccount")),LedgerAccountRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LedgerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LedgerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LedgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerAccountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnUnit As DataColumn
        
        Private columnNormalBalance As DataColumn
        
        Private columnPath As DataColumn
        
        Private columnLedger_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("LedgerAccount")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property UnitColumn As DataColumn
            Get
                Return Me.columnUnit
            End Get
        End Property
        
        Friend ReadOnly Property NormalBalanceColumn As DataColumn
            Get
                Return Me.columnNormalBalance
            End Get
        End Property
        
        Friend ReadOnly Property PathColumn As DataColumn
            Get
                Return Me.columnPath
            End Get
        End Property
        
        Friend ReadOnly Property Ledger_IdColumn As DataColumn
            Get
                Return Me.columnLedger_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LedgerAccountRow
            Get
                Return CType(Me.Rows(index),LedgerAccountRow)
            End Get
        End Property
        
        Public Event LedgerAccountRowChanged As LedgerAccountRowChangeEventHandler
        
        Public Event LedgerAccountRowChanging As LedgerAccountRowChangeEventHandler
        
        Public Event LedgerAccountRowDeleted As LedgerAccountRowChangeEventHandler
        
        Public Event LedgerAccountRowDeleting As LedgerAccountRowChangeEventHandler
        
        Public Overloads Sub AddLedgerAccountRow(ByVal row As LedgerAccountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLedgerAccountRow(ByVal Unit As String, ByVal NormalBalance As String, ByVal Path As String, ByVal parentLedgerRowByLedger_LedgerAccount As LedgerRow) As LedgerAccountRow
            Dim rowLedgerAccountRow As LedgerAccountRow = CType(Me.NewRow,LedgerAccountRow)
            rowLedgerAccountRow.ItemArray = New Object() {Nothing, Unit, NormalBalance, Path, parentLedgerRowByLedger_LedgerAccount(2)}
            Me.Rows.Add(rowLedgerAccountRow)
            Return rowLedgerAccountRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LedgerAccountDataTable = CType(MyBase.Clone,LedgerAccountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LedgerAccountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnUnit = Me.Columns("Unit")
            Me.columnNormalBalance = Me.Columns("NormalBalance")
            Me.columnPath = Me.Columns("Path")
            Me.columnLedger_Id = Me.Columns("Ledger_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnUnit = New DataColumn("Unit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnit)
            Me.columnNormalBalance = New DataColumn("NormalBalance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNormalBalance)
            Me.columnPath = New DataColumn("Path", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPath)
            Me.columnLedger_Id = New DataColumn("Ledger_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnLedger_Id)
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnUnit.AllowDBNull = false
            Me.columnNormalBalance.AllowDBNull = false
            Me.columnPath.AllowDBNull = false
        End Sub
        
        Public Function NewLedgerAccountRow() As LedgerAccountRow
            Return CType(Me.NewRow,LedgerAccountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LedgerAccountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LedgerAccountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LedgerAccountRowChangedEvent) Is Nothing) Then
                RaiseEvent LedgerAccountRowChanged(Me, New LedgerAccountRowChangeEvent(CType(e.Row,LedgerAccountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LedgerAccountRowChangingEvent) Is Nothing) Then
                RaiseEvent LedgerAccountRowChanging(Me, New LedgerAccountRowChangeEvent(CType(e.Row,LedgerAccountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LedgerAccountRowDeletedEvent) Is Nothing) Then
                RaiseEvent LedgerAccountRowDeleted(Me, New LedgerAccountRowChangeEvent(CType(e.Row,LedgerAccountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LedgerAccountRowDeletingEvent) Is Nothing) Then
                RaiseEvent LedgerAccountRowDeleting(Me, New LedgerAccountRowChangeEvent(CType(e.Row,LedgerAccountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLedgerAccountRow(ByVal row As LedgerAccountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerAccountRow
        Inherits DataRow
        
        Private tableLedgerAccount As LedgerAccountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLedgerAccount = CType(Me.Table,LedgerAccountDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableLedgerAccount.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableLedgerAccount.IDColumn) = value
            End Set
        End Property
        
        Public Property Unit As String
            Get
                Return CType(Me(Me.tableLedgerAccount.UnitColumn),String)
            End Get
            Set
                Me(Me.tableLedgerAccount.UnitColumn) = value
            End Set
        End Property
        
        Public Property NormalBalance As String
            Get
                Return CType(Me(Me.tableLedgerAccount.NormalBalanceColumn),String)
            End Get
            Set
                Me(Me.tableLedgerAccount.NormalBalanceColumn) = value
            End Set
        End Property
        
        Public Property Path As String
            Get
                Return CType(Me(Me.tableLedgerAccount.PathColumn),String)
            End Get
            Set
                Me(Me.tableLedgerAccount.PathColumn) = value
            End Set
        End Property
        
        Public Property LedgerRow As LedgerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Ledger_LedgerAccount")),LedgerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Ledger_LedgerAccount"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LedgerAccountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LedgerAccountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LedgerAccountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LedgerAccountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBudget_Id As DataColumn
        
        Private columnProject_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Budget")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Budget_IdColumn As DataColumn
            Get
                Return Me.columnBudget_Id
            End Get
        End Property
        
        Friend ReadOnly Property Project_IdColumn As DataColumn
            Get
                Return Me.columnProject_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BudgetRow
            Get
                Return CType(Me.Rows(index),BudgetRow)
            End Get
        End Property
        
        Public Event BudgetRowChanged As BudgetRowChangeEventHandler
        
        Public Event BudgetRowChanging As BudgetRowChangeEventHandler
        
        Public Event BudgetRowDeleted As BudgetRowChangeEventHandler
        
        Public Event BudgetRowDeleting As BudgetRowChangeEventHandler
        
        Public Overloads Sub AddBudgetRow(ByVal row As BudgetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBudgetRow(ByVal parentProjectRowByProject_Budget As ProjectRow) As BudgetRow
            Dim rowBudgetRow As BudgetRow = CType(Me.NewRow,BudgetRow)
            rowBudgetRow.ItemArray = New Object() {Nothing, parentProjectRowByProject_Budget(1)}
            Me.Rows.Add(rowBudgetRow)
            Return rowBudgetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BudgetDataTable = CType(MyBase.Clone,BudgetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BudgetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBudget_Id = Me.Columns("Budget_Id")
            Me.columnProject_Id = Me.Columns("Project_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnBudget_Id = New DataColumn("Budget_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBudget_Id)
            Me.columnProject_Id = New DataColumn("Project_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnProject_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnBudget_Id}, true))
            Me.columnBudget_Id.AutoIncrement = true
            Me.columnBudget_Id.AllowDBNull = false
            Me.columnBudget_Id.Unique = true
        End Sub
        
        Public Function NewBudgetRow() As BudgetRow
            Return CType(Me.NewRow,BudgetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BudgetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BudgetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BudgetRowChangedEvent) Is Nothing) Then
                RaiseEvent BudgetRowChanged(Me, New BudgetRowChangeEvent(CType(e.Row,BudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BudgetRowChangingEvent) Is Nothing) Then
                RaiseEvent BudgetRowChanging(Me, New BudgetRowChangeEvent(CType(e.Row,BudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BudgetRowDeletedEvent) Is Nothing) Then
                RaiseEvent BudgetRowDeleted(Me, New BudgetRowChangeEvent(CType(e.Row,BudgetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BudgetRowDeletingEvent) Is Nothing) Then
                RaiseEvent BudgetRowDeleting(Me, New BudgetRowChangeEvent(CType(e.Row,BudgetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBudgetRow(ByVal row As BudgetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetRow
        Inherits DataRow
        
        Private tableBudget As BudgetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBudget = CType(Me.Table,BudgetDataTable)
        End Sub
        
        Public Property ProjectRow As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Project_Budget")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Project_Budget"))
            End Set
        End Property
        
        Public Function GetBudgetAccountRows() As BudgetAccountRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Budget_BudgetAccount")),BudgetAccountRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BudgetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BudgetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BudgetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetAccountDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnValueReferenceAccountID As DataColumn
        
        Private columnType As DataColumn
        
        Private columnValue As DataColumn
        
        Private columnQuantity As DataColumn
        
        Private columnUnit As DataColumn
        
        Private columnNormalBalance As DataColumn
        
        Private columnPath As DataColumn
        
        Private columnQuantityReferenceAccountID As DataColumn
        
        Private columnParentAccountID As DataColumn
        
        Private columnBudget_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("BudgetAccount")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property ValueReferenceAccountIDColumn As DataColumn
            Get
                Return Me.columnValueReferenceAccountID
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property ValueColumn As DataColumn
            Get
                Return Me.columnValue
            End Get
        End Property
        
        Friend ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Friend ReadOnly Property UnitColumn As DataColumn
            Get
                Return Me.columnUnit
            End Get
        End Property
        
        Friend ReadOnly Property NormalBalanceColumn As DataColumn
            Get
                Return Me.columnNormalBalance
            End Get
        End Property
        
        Friend ReadOnly Property PathColumn As DataColumn
            Get
                Return Me.columnPath
            End Get
        End Property
        
        Friend ReadOnly Property QuantityReferenceAccountIDColumn As DataColumn
            Get
                Return Me.columnQuantityReferenceAccountID
            End Get
        End Property
        
        Friend ReadOnly Property ParentAccountIDColumn As DataColumn
            Get
                Return Me.columnParentAccountID
            End Get
        End Property
        
        Friend ReadOnly Property Budget_IdColumn As DataColumn
            Get
                Return Me.columnBudget_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BudgetAccountRow
            Get
                Return CType(Me.Rows(index),BudgetAccountRow)
            End Get
        End Property
        
        Public Event BudgetAccountRowChanged As BudgetAccountRowChangeEventHandler
        
        Public Event BudgetAccountRowChanging As BudgetAccountRowChangeEventHandler
        
        Public Event BudgetAccountRowDeleted As BudgetAccountRowChangeEventHandler
        
        Public Event BudgetAccountRowDeleting As BudgetAccountRowChangeEventHandler
        
        Public Overloads Sub AddBudgetAccountRow(ByVal row As BudgetAccountRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBudgetAccountRow(ByVal ID As Integer, ByVal ValueReferenceAccountID As Integer, ByVal Type As String, ByVal Value As Single, ByVal Quantity As Long, ByVal Unit As String, ByVal NormalBalance As String, ByVal Path As String, ByVal QuantityReferenceAccountID As Integer, ByVal ParentAccountID As Integer, ByVal parentBudgetRowByBudget_BudgetAccount As BudgetRow) As BudgetAccountRow
            Dim rowBudgetAccountRow As BudgetAccountRow = CType(Me.NewRow,BudgetAccountRow)
            rowBudgetAccountRow.ItemArray = New Object() {ID, ValueReferenceAccountID, Type, Value, Quantity, Unit, NormalBalance, Path, QuantityReferenceAccountID, ParentAccountID, parentBudgetRowByBudget_BudgetAccount(0)}
            Me.Rows.Add(rowBudgetAccountRow)
            Return rowBudgetAccountRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BudgetAccountDataTable = CType(MyBase.Clone,BudgetAccountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BudgetAccountDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnValueReferenceAccountID = Me.Columns("ValueReferenceAccountID")
            Me.columnType = Me.Columns("Type")
            Me.columnValue = Me.Columns("Value")
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnUnit = Me.Columns("Unit")
            Me.columnNormalBalance = Me.Columns("NormalBalance")
            Me.columnPath = Me.Columns("Path")
            Me.columnQuantityReferenceAccountID = Me.Columns("QuantityReferenceAccountID")
            Me.columnParentAccountID = Me.Columns("ParentAccountID")
            Me.columnBudget_Id = Me.Columns("Budget_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnValueReferenceAccountID = New DataColumn("ValueReferenceAccountID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValueReferenceAccountID)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnValue = New DataColumn("Value", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValue)
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnUnit = New DataColumn("Unit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnit)
            Me.columnNormalBalance = New DataColumn("NormalBalance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNormalBalance)
            Me.columnPath = New DataColumn("Path", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPath)
            Me.columnQuantityReferenceAccountID = New DataColumn("QuantityReferenceAccountID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantityReferenceAccountID)
            Me.columnParentAccountID = New DataColumn("ParentAccountID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnParentAccountID)
            Me.columnBudget_Id = New DataColumn("Budget_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBudget_Id)
            Me.columnID.AllowDBNull = false
            Me.columnValueReferenceAccountID.AllowDBNull = false
            Me.columnType.AllowDBNull = false
            Me.columnValue.AllowDBNull = false
            Me.columnQuantity.AllowDBNull = false
            Me.columnUnit.AllowDBNull = false
            Me.columnNormalBalance.AllowDBNull = false
            Me.columnPath.AllowDBNull = false
            Me.columnQuantityReferenceAccountID.AllowDBNull = false
        End Sub
        
        Public Function NewBudgetAccountRow() As BudgetAccountRow
            Return CType(Me.NewRow,BudgetAccountRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BudgetAccountRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BudgetAccountRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BudgetAccountRowChangedEvent) Is Nothing) Then
                RaiseEvent BudgetAccountRowChanged(Me, New BudgetAccountRowChangeEvent(CType(e.Row,BudgetAccountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BudgetAccountRowChangingEvent) Is Nothing) Then
                RaiseEvent BudgetAccountRowChanging(Me, New BudgetAccountRowChangeEvent(CType(e.Row,BudgetAccountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BudgetAccountRowDeletedEvent) Is Nothing) Then
                RaiseEvent BudgetAccountRowDeleted(Me, New BudgetAccountRowChangeEvent(CType(e.Row,BudgetAccountRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BudgetAccountRowDeletingEvent) Is Nothing) Then
                RaiseEvent BudgetAccountRowDeleting(Me, New BudgetAccountRowChangeEvent(CType(e.Row,BudgetAccountRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBudgetAccountRow(ByVal row As BudgetAccountRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetAccountRow
        Inherits DataRow
        
        Private tableBudgetAccount As BudgetAccountDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBudgetAccount = CType(Me.Table,BudgetAccountDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableBudgetAccount.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableBudgetAccount.IDColumn) = value
            End Set
        End Property
        
        Public Property ValueReferenceAccountID As Integer
            Get
                Return CType(Me(Me.tableBudgetAccount.ValueReferenceAccountIDColumn),Integer)
            End Get
            Set
                Me(Me.tableBudgetAccount.ValueReferenceAccountIDColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Return CType(Me(Me.tableBudgetAccount.TypeColumn),String)
            End Get
            Set
                Me(Me.tableBudgetAccount.TypeColumn) = value
            End Set
        End Property
        
        Public Property Value As Single
            Get
                Return CType(Me(Me.tableBudgetAccount.ValueColumn),Single)
            End Get
            Set
                Me(Me.tableBudgetAccount.ValueColumn) = value
            End Set
        End Property
        
        Public Property Quantity As Long
            Get
                Return CType(Me(Me.tableBudgetAccount.QuantityColumn),Long)
            End Get
            Set
                Me(Me.tableBudgetAccount.QuantityColumn) = value
            End Set
        End Property
        
        Public Property Unit As String
            Get
                Return CType(Me(Me.tableBudgetAccount.UnitColumn),String)
            End Get
            Set
                Me(Me.tableBudgetAccount.UnitColumn) = value
            End Set
        End Property
        
        Public Property NormalBalance As String
            Get
                Return CType(Me(Me.tableBudgetAccount.NormalBalanceColumn),String)
            End Get
            Set
                Me(Me.tableBudgetAccount.NormalBalanceColumn) = value
            End Set
        End Property
        
        Public Property Path As String
            Get
                Return CType(Me(Me.tableBudgetAccount.PathColumn),String)
            End Get
            Set
                Me(Me.tableBudgetAccount.PathColumn) = value
            End Set
        End Property
        
        Public Property QuantityReferenceAccountID As Integer
            Get
                Return CType(Me(Me.tableBudgetAccount.QuantityReferenceAccountIDColumn),Integer)
            End Get
            Set
                Me(Me.tableBudgetAccount.QuantityReferenceAccountIDColumn) = value
            End Set
        End Property
        
        Public Property ParentAccountID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBudgetAccount.ParentAccountIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBudgetAccount.ParentAccountIDColumn) = value
            End Set
        End Property
        
        Public Property BudgetRow As BudgetRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Budget_BudgetAccount")),BudgetRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Budget_BudgetAccount"))
            End Set
        End Property
        
        Public Function IsParentAccountIDNull() As Boolean
            Return Me.IsNull(Me.tableBudgetAccount.ParentAccountIDColumn)
        End Function
        
        Public Sub SetParentAccountIDNull()
            Me(Me.tableBudgetAccount.ParentAccountIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BudgetAccountRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BudgetAccountRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BudgetAccountRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BudgetAccountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LayoutDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnWindowType As DataColumn
        
        Private columnHeight As DataColumn
        
        Private columnWidth As DataColumn
        
        Private columnTop As DataColumn
        
        Private columnLeft As DataColumn
        
        Private columnProject_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Layout")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property WindowTypeColumn As DataColumn
            Get
                Return Me.columnWindowType
            End Get
        End Property
        
        Friend ReadOnly Property HeightColumn As DataColumn
            Get
                Return Me.columnHeight
            End Get
        End Property
        
        Friend ReadOnly Property WidthColumn As DataColumn
            Get
                Return Me.columnWidth
            End Get
        End Property
        
        Friend ReadOnly Property TopColumn As DataColumn
            Get
                Return Me.columnTop
            End Get
        End Property
        
        Friend ReadOnly Property LeftColumn As DataColumn
            Get
                Return Me.columnLeft
            End Get
        End Property
        
        Friend ReadOnly Property Project_IdColumn As DataColumn
            Get
                Return Me.columnProject_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LayoutRow
            Get
                Return CType(Me.Rows(index),LayoutRow)
            End Get
        End Property
        
        Public Event LayoutRowChanged As LayoutRowChangeEventHandler
        
        Public Event LayoutRowChanging As LayoutRowChangeEventHandler
        
        Public Event LayoutRowDeleted As LayoutRowChangeEventHandler
        
        Public Event LayoutRowDeleting As LayoutRowChangeEventHandler
        
        Public Overloads Sub AddLayoutRow(ByVal row As LayoutRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLayoutRow(ByVal WindowType As Long, ByVal Height As Long, ByVal Width As Long, ByVal Top As Long, ByVal Left As Long, ByVal parentProjectRowByProject_Layout As ProjectRow) As LayoutRow
            Dim rowLayoutRow As LayoutRow = CType(Me.NewRow,LayoutRow)
            rowLayoutRow.ItemArray = New Object() {WindowType, Height, Width, Top, Left, parentProjectRowByProject_Layout(1)}
            Me.Rows.Add(rowLayoutRow)
            Return rowLayoutRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LayoutDataTable = CType(MyBase.Clone,LayoutDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LayoutDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnWindowType = Me.Columns("WindowType")
            Me.columnHeight = Me.Columns("Height")
            Me.columnWidth = Me.Columns("Width")
            Me.columnTop = Me.Columns("Top")
            Me.columnLeft = Me.Columns("Left")
            Me.columnProject_Id = Me.Columns("Project_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnWindowType = New DataColumn("WindowType", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWindowType)
            Me.columnHeight = New DataColumn("Height", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHeight)
            Me.columnWidth = New DataColumn("Width", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWidth)
            Me.columnTop = New DataColumn("Top", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTop)
            Me.columnLeft = New DataColumn("Left", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLeft)
            Me.columnProject_Id = New DataColumn("Project_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnProject_Id)
            Me.columnWindowType.AllowDBNull = false
            Me.columnHeight.AllowDBNull = false
            Me.columnWidth.AllowDBNull = false
            Me.columnTop.AllowDBNull = false
            Me.columnLeft.AllowDBNull = false
        End Sub
        
        Public Function NewLayoutRow() As LayoutRow
            Return CType(Me.NewRow,LayoutRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LayoutRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LayoutRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LayoutRowChangedEvent) Is Nothing) Then
                RaiseEvent LayoutRowChanged(Me, New LayoutRowChangeEvent(CType(e.Row,LayoutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LayoutRowChangingEvent) Is Nothing) Then
                RaiseEvent LayoutRowChanging(Me, New LayoutRowChangeEvent(CType(e.Row,LayoutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LayoutRowDeletedEvent) Is Nothing) Then
                RaiseEvent LayoutRowDeleted(Me, New LayoutRowChangeEvent(CType(e.Row,LayoutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LayoutRowDeletingEvent) Is Nothing) Then
                RaiseEvent LayoutRowDeleting(Me, New LayoutRowChangeEvent(CType(e.Row,LayoutRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLayoutRow(ByVal row As LayoutRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LayoutRow
        Inherits DataRow
        
        Private tableLayout As LayoutDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLayout = CType(Me.Table,LayoutDataTable)
        End Sub
        
        Public Property WindowType As Long
            Get
                Return CType(Me(Me.tableLayout.WindowTypeColumn),Long)
            End Get
            Set
                Me(Me.tableLayout.WindowTypeColumn) = value
            End Set
        End Property
        
        Public Property Height As Long
            Get
                Return CType(Me(Me.tableLayout.HeightColumn),Long)
            End Get
            Set
                Me(Me.tableLayout.HeightColumn) = value
            End Set
        End Property
        
        Public Property Width As Long
            Get
                Return CType(Me(Me.tableLayout.WidthColumn),Long)
            End Get
            Set
                Me(Me.tableLayout.WidthColumn) = value
            End Set
        End Property
        
        Public Property Top As Long
            Get
                Return CType(Me(Me.tableLayout.TopColumn),Long)
            End Get
            Set
                Me(Me.tableLayout.TopColumn) = value
            End Set
        End Property
        
        Public Property Left As Long
            Get
                Return CType(Me(Me.tableLayout.LeftColumn),Long)
            End Get
            Set
                Me(Me.tableLayout.LeftColumn) = value
            End Set
        End Property
        
        Public Property ProjectRow As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Project_Layout")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Project_Layout"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LayoutRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LayoutRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LayoutRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LayoutRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
