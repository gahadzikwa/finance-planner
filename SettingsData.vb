'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class SettingsData
    Inherits DataSet
    
    Private tableSettings As SettingsDataTable
    
    Private tableRecentDocuments As RecentDocumentsDataTable
    
    Private relationSettings_RecentDocuments As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Settings")) Is Nothing) Then
                Me.Tables.Add(New SettingsDataTable(ds.Tables("Settings")))
            End If
            If (Not (ds.Tables("RecentDocuments")) Is Nothing) Then
                Me.Tables.Add(New RecentDocumentsDataTable(ds.Tables("RecentDocuments")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Settings As SettingsDataTable
        Get
            Return Me.tableSettings
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RecentDocuments As RecentDocumentsDataTable
        Get
            Return Me.tableRecentDocuments
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As SettingsData = CType(MyBase.Clone,SettingsData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Settings")) Is Nothing) Then
            Me.Tables.Add(New SettingsDataTable(ds.Tables("Settings")))
        End If
        If (Not (ds.Tables("RecentDocuments")) Is Nothing) Then
            Me.Tables.Add(New RecentDocumentsDataTable(ds.Tables("RecentDocuments")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSettings = CType(Me.Tables("Settings"),SettingsDataTable)
        If (Not (Me.tableSettings) Is Nothing) Then
            Me.tableSettings.InitVars
        End If
        Me.tableRecentDocuments = CType(Me.Tables("RecentDocuments"),RecentDocumentsDataTable)
        If (Not (Me.tableRecentDocuments) Is Nothing) Then
            Me.tableRecentDocuments.InitVars
        End If
        Me.relationSettings_RecentDocuments = Me.Relations("Settings_RecentDocuments")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "SettingsData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SettingsData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSettings = New SettingsDataTable
        Me.Tables.Add(Me.tableSettings)
        Me.tableRecentDocuments = New RecentDocumentsDataTable
        Me.Tables.Add(Me.tableRecentDocuments)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Settings_RecentDocuments", New DataColumn() {Me.tableSettings.Settings_IdColumn}, New DataColumn() {Me.tableRecentDocuments.Settings_IdColumn})
        Me.tableRecentDocuments.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me.relationSettings_RecentDocuments = New DataRelation("Settings_RecentDocuments", New DataColumn() {Me.tableSettings.Settings_IdColumn}, New DataColumn() {Me.tableRecentDocuments.Settings_IdColumn}, false)
        Me.relationSettings_RecentDocuments.Nested = true
        Me.Relations.Add(Me.relationSettings_RecentDocuments)
    End Sub
    
    Private Function ShouldSerializeSettings() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRecentDocuments() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub SettingsRowChangeEventHandler(ByVal sender As Object, ByVal e As SettingsRowChangeEvent)
    
    Public Delegate Sub RecentDocumentsRowChangeEventHandler(ByVal sender As Object, ByVal e As RecentDocumentsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSettings_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Settings")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Settings_IdColumn As DataColumn
            Get
                Return Me.columnSettings_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SettingsRow
            Get
                Return CType(Me.Rows(index),SettingsRow)
            End Get
        End Property
        
        Public Event SettingsRowChanged As SettingsRowChangeEventHandler
        
        Public Event SettingsRowChanging As SettingsRowChangeEventHandler
        
        Public Event SettingsRowDeleted As SettingsRowChangeEventHandler
        
        Public Event SettingsRowDeleting As SettingsRowChangeEventHandler
        
        Public Overloads Sub AddSettingsRow(ByVal row As SettingsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSettingsRow() As SettingsRow
            Dim rowSettingsRow As SettingsRow = CType(Me.NewRow,SettingsRow)
            rowSettingsRow.ItemArray = New Object() {Nothing}
            Me.Rows.Add(rowSettingsRow)
            Return rowSettingsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SettingsDataTable = CType(MyBase.Clone,SettingsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SettingsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSettings_Id = Me.Columns("Settings_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSettings_Id = New DataColumn("Settings_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSettings_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSettings_Id}, true))
            Me.columnSettings_Id.AutoIncrement = true
            Me.columnSettings_Id.AllowDBNull = false
            Me.columnSettings_Id.Unique = true
        End Sub
        
        Public Function NewSettingsRow() As SettingsRow
            Return CType(Me.NewRow,SettingsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SettingsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SettingsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SettingsRowChangedEvent) Is Nothing) Then
                RaiseEvent SettingsRowChanged(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SettingsRowChangingEvent) Is Nothing) Then
                RaiseEvent SettingsRowChanging(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SettingsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SettingsRowDeleted(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SettingsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SettingsRowDeleting(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSettingsRow(ByVal row As SettingsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingsRow
        Inherits DataRow
        
        Private tableSettings As SettingsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSettings = CType(Me.Table,SettingsDataTable)
        End Sub
        
        Public Function GetRecentDocumentsRows() As RecentDocumentsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Settings_RecentDocuments")),RecentDocumentsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SettingsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SettingsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SettingsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RecentDocumentsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpath As DataColumn
        
        Private columnname As DataColumn
        
        Private columnSettings_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("RecentDocuments")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property pathColumn As DataColumn
            Get
                Return Me.columnpath
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property Settings_IdColumn As DataColumn
            Get
                Return Me.columnSettings_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RecentDocumentsRow
            Get
                Return CType(Me.Rows(index),RecentDocumentsRow)
            End Get
        End Property
        
        Public Event RecentDocumentsRowChanged As RecentDocumentsRowChangeEventHandler
        
        Public Event RecentDocumentsRowChanging As RecentDocumentsRowChangeEventHandler
        
        Public Event RecentDocumentsRowDeleted As RecentDocumentsRowChangeEventHandler
        
        Public Event RecentDocumentsRowDeleting As RecentDocumentsRowChangeEventHandler
        
        Public Overloads Sub AddRecentDocumentsRow(ByVal row As RecentDocumentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRecentDocumentsRow(ByVal path As String, ByVal name As String, ByVal parentSettingsRowBySettings_RecentDocuments As SettingsRow) As RecentDocumentsRow
            Dim rowRecentDocumentsRow As RecentDocumentsRow = CType(Me.NewRow,RecentDocumentsRow)
            rowRecentDocumentsRow.ItemArray = New Object() {path, name, parentSettingsRowBySettings_RecentDocuments(0)}
            Me.Rows.Add(rowRecentDocumentsRow)
            Return rowRecentDocumentsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RecentDocumentsDataTable = CType(MyBase.Clone,RecentDocumentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RecentDocumentsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpath = Me.Columns("path")
            Me.columnname = Me.Columns("name")
            Me.columnSettings_Id = Me.Columns("Settings_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnpath = New DataColumn("path", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpath)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnSettings_Id = New DataColumn("Settings_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSettings_Id)
        End Sub
        
        Public Function NewRecentDocumentsRow() As RecentDocumentsRow
            Return CType(Me.NewRow,RecentDocumentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RecentDocumentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RecentDocumentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RecentDocumentsRowChangedEvent) Is Nothing) Then
                RaiseEvent RecentDocumentsRowChanged(Me, New RecentDocumentsRowChangeEvent(CType(e.Row,RecentDocumentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RecentDocumentsRowChangingEvent) Is Nothing) Then
                RaiseEvent RecentDocumentsRowChanging(Me, New RecentDocumentsRowChangeEvent(CType(e.Row,RecentDocumentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RecentDocumentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent RecentDocumentsRowDeleted(Me, New RecentDocumentsRowChangeEvent(CType(e.Row,RecentDocumentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RecentDocumentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent RecentDocumentsRowDeleting(Me, New RecentDocumentsRowChangeEvent(CType(e.Row,RecentDocumentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRecentDocumentsRow(ByVal row As RecentDocumentsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RecentDocumentsRow
        Inherits DataRow
        
        Private tableRecentDocuments As RecentDocumentsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRecentDocuments = CType(Me.Table,RecentDocumentsDataTable)
        End Sub
        
        Public Property path As String
            Get
                Try 
                    Return CType(Me(Me.tableRecentDocuments.pathColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecentDocuments.pathColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableRecentDocuments.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecentDocuments.nameColumn) = value
            End Set
        End Property
        
        Public Property SettingsRow As SettingsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Settings_RecentDocuments")),SettingsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Settings_RecentDocuments"))
            End Set
        End Property
        
        Public Function IspathNull() As Boolean
            Return Me.IsNull(Me.tableRecentDocuments.pathColumn)
        End Function
        
        Public Sub SetpathNull()
            Me(Me.tableRecentDocuments.pathColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableRecentDocuments.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableRecentDocuments.nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RecentDocumentsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RecentDocumentsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RecentDocumentsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RecentDocumentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
